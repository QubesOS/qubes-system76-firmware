From 5589b2e7cef9e3aedfa8f7c7382f274cbd7e8edb Mon Sep 17 00:00:00 2001
Message-ID: <5589b2e7cef9e3aedfa8f7c7382f274cbd7e8edb.1740034827.git.demi@invisiblethingslab.com>
From: Demi Marie Obenour <demi@invisiblethingslab.com>
Date: Sun, 16 Jun 2024 16:36:16 -0400
Subject: [PATCH 300/301] Use a tar subprocess instead of pure-Rust
 implementation

This avoids two dependencies.  Not tested!
---
 Cargo.lock  | 66 +-----------------------------------------
 Cargo.toml  |  2 --
 src/util.rs | 82 ++++++++++++++++++++++++++---------------------------
 3 files changed, 41 insertions(+), 109 deletions(-)

diff --git a/Cargo.lock b/Cargo.lock
index ca60708dfd562e27c620e058236ff4cb8a72c218..e99adb99821762ad77a42919053dbe8e14205330 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -1,6 +1,6 @@
 # This file is automatically @generated by Cargo.
 # It is not intended for manual editing.
-version = 3
+version = 4
 
 [[package]]
 name = "addr2line"
@@ -315,18 +315,6 @@ version = "2.3.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "37909eebbb50d72f9059c3b6d82c0463f2ff062c9e95845c43a6c9c0355411be"
 
-[[package]]
-name = "filetime"
-version = "0.2.25"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "35c0522e981e68cbfa8c3f978441a5f34b30b96e146b33cd3359176b50fe8586"
-dependencies = [
- "cfg-if",
- "libc",
- "libredox",
- "windows-sys 0.59.0",
-]
-
 [[package]]
 name = "fnv"
 version = "1.0.7"
@@ -778,17 +766,6 @@ dependencies = [
  "pkg-config",
 ]
 
-[[package]]
-name = "libredox"
-version = "0.1.3"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c0ff37bd590ca25063e35af745c343cb7a0271906fb7b37e4813e8f79f00268d"
-dependencies = [
- "bitflags 2.8.0",
- "libc",
- "redox_syscall",
-]
-
 [[package]]
 name = "linux-raw-sys"
 version = "0.4.15"
@@ -1042,15 +1019,6 @@ dependencies = [
  "getrandom 0.2.15",
 ]
 
-[[package]]
-name = "redox_syscall"
-version = "0.5.8"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "03a862b389f93e68874fbf580b9de08dd02facb9a788ebadaf4a3fd33cf58834"
-dependencies = [
- "bitflags 2.8.0",
-]
-
 [[package]]
 name = "reqwest"
 version = "0.11.27"
@@ -1091,16 +1059,6 @@ dependencies = [
  "winreg",
 ]
 
-[[package]]
-name = "rust-lzma"
-version = "0.6.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7d62915608f6cee1d7f2fc00f28b4f058ff79d6e4ec3c2fe0006b09b52437c84"
-dependencies = [
- "pkg-config",
- "vcpkg",
-]
-
 [[package]]
 name = "rustc-demangle"
 version = "0.1.24"
@@ -1364,12 +1322,10 @@ dependencies = [
  "ecflash",
  "libc",
  "plain",
- "rust-lzma",
  "serde",
  "serde_json",
  "sha2",
  "system76_ectool",
- "tar",
  "tempfile",
  "uuid",
 ]
@@ -1398,17 +1354,6 @@ dependencies = [
  "libc",
 ]
 
-[[package]]
-name = "tar"
-version = "0.4.35"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7d779dc6aeff029314570f666ec83f19df7280bb36ef338442cfa8c604021b80"
-dependencies = [
- "filetime",
- "libc",
- "xattr",
-]
-
 [[package]]
 name = "tempfile"
 version = "3.16.0"
@@ -1905,15 +1850,6 @@ version = "0.5.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "1e9df38ee2d2c3c5948ea468a8406ff0db0b29ae1ffde1bcf20ef305bcc95c51"
 
-[[package]]
-name = "xattr"
-version = "0.2.3"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6d1526bbe5aaeb5eb06885f4d987bcdfa5e23187055de9b83fe00156a821fabc"
-dependencies = [
- "libc",
-]
-
 [[package]]
 name = "yoke"
 version = "0.7.5"
diff --git a/Cargo.toml b/Cargo.toml
index 1f071662d5e35673c96e3131f4388355953ca744..3f9d806f4a8a0902019f5b01c32719553e2e41e9 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -19,11 +19,9 @@ clap = { version = "3", features = ["derive"] }
 ecflash = { git = "https://github.com/system76/ecflash.git", branch = "stable" }
 libc = "0.2"
 plain = "0.2"
-rust-lzma = "0.6"
 serde = { version = "1.0", features = ["derive"] }
 serde_json = "1.0"
 sha2 = "0.10"
-tar = "=0.4.35"
 tempfile = "3.8"
 uuid = "1.4"
 
diff --git a/src/util.rs b/src/util.rs
index 06d8be63cfd5830eab6737d059ddc6f732454894..bb0464aebc107f875e52a5a3a1be533c4678c809 100644
--- a/src/util.rs
+++ b/src/util.rs
@@ -1,8 +1,7 @@
-use lzma::reader::LzmaReader;
 use sha2::{Digest, Sha256};
-use std::io::Read;
+use std::ffi::OsStr;
+use std::io::{Read, Write};
 use std::{fs, io, path, process};
-use tar::Archive;
 
 pub fn get_efi_mnt() -> Option<String> {
     let bootctl_esp = process::Command::new("bootctl")
@@ -26,50 +25,49 @@ pub fn get_efi_mnt() -> Option<String> {
     })
 }
 
-pub fn extract<P: AsRef<path::Path>>(data: &[u8], p: P) -> io::Result<()> {
-    let decompressor = LzmaReader::new_decompressor(data)
-        .map_err(|err| io::Error::new(io::ErrorKind::Other, err))?;
-    let mut tar = Archive::new(decompressor);
-
-    for file_res in tar.entries()? {
-        let mut file = file_res?;
-
-        println!("{:?}", file.path());
-        if !file.unpack_in(&p)? {
-            return Err(io::Error::new(
-                io::ErrorKind::InvalidData,
-                format!("invalid file path {:?}", file.path()),
-            ));
-        }
+pub fn extract<P: AsRef<path::Path> + Copy>(data: &[u8], p: P) -> io::Result<()> {
+    std::fs::create_dir_all(p)?;
+    let mut extract_cli = process::Command::new("tar")
+        .args(["-xJv"])
+        .stdin(process::Stdio::piped())
+        .current_dir(p)
+        .spawn()?;
+    let mut stdin = extract_cli.stdin.take().expect("stdlib bug");
+    stdin.write_all(data)?;
+    drop(stdin);
+    let output = extract_cli.wait()?;
+    if output.success() {
+        Ok(())
+    } else {
+        Err(io::Error::new(io::ErrorKind::Other, "tar failed"))
     }
-
-    Ok(())
 }
 
 pub fn extract_file<P: AsRef<path::Path>>(data: &[u8], path: P) -> io::Result<String> {
-    let decompressor = LzmaReader::new_decompressor(data)
-        .map_err(|err| io::Error::new(io::ErrorKind::Other, err))?;
-    let mut tar = Archive::new(decompressor);
-
-    for file_res in tar.entries()? {
-        let mut file = file_res?;
-
-        if let Ok(file_path) = file.path() {
-            if file_path != path.as_ref() {
-                continue;
-            }
-        }
-
-        println!("{:?}", file.path());
-        let mut s = String::new();
-        file.read_to_string(&mut s)?;
-        return Ok(s);
+    let mut extract_cli = process::Command::new("tar")
+        .args([
+            OsStr::new("-xJvO"),
+            OsStr::new("--"),
+            path.as_ref().as_os_str(),
+        ])
+        .stdin(process::Stdio::piped())
+        .stdout(process::Stdio::piped())
+        .spawn()?;
+    let mut stdin = extract_cli.stdin.take().expect("stdlib bug");
+    let mut stdout = extract_cli.stdout.take().expect("stdlib bug");
+    let output = std::thread::scope(|scope| {
+        let res = scope.spawn(move || stdin.write_all(data));
+        let mut output = String::new();
+        stdout.read_to_string(&mut output)?;
+        res.join().expect("thread panicked")?;
+        Ok::<_, std::io::Error>(output)
+    })?;
+    let status = extract_cli.wait()?;
+    if status.success() {
+        Ok(output)
+    } else {
+        Err(io::Error::new(io::ErrorKind::Other, "tar failed"))
     }
-
-    Err(io::Error::new(
-        io::ErrorKind::NotFound,
-        format!("failed to find {:?}", path.as_ref()),
-    ))
 }
 
 pub fn read_string<P: AsRef<path::Path>>(p: P) -> io::Result<String> {
-- 
Sincerely,
Demi Marie Obenour (she/her/hers)
Invisible Things Lab

